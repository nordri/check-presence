---
AWSTemplateFormatVersion: 2010-09-09
Description: Lambda and Redis to deploy a presence check system

Parameters:

  ClusterName:
    Description: Name of the cluster
    Type: String
    Default: redis-aps1

  CacheInstaceType:
    Description: Size of the instance for the cache. https://aws.amazon.com/elasticache/pricing/
    Type: String
    Default: cache.t2.micro

  VPCSecurityGroup:
    Description: ID of the security group for both, redis and lambda function
    Type: String
    Default: sg-357bb758

  S3Bucket:
    Description: An Amazon S3 bucket in the same AWS Region as your function
    Type: String
    Default: nordri-aps1

  S3Key:
    Description: The Amazon S3 key of the deployment package
    Type: String
    Default: presence.zip

  LambdaRole:
    Description: The Amazon Resource Name (ARN) of the function's execution role
    Type: String
    Default: arn:aws:iam::244739416004:role/service-role/presence-role-d7l9pgg2

  LambdaVPCSubnet:
    Description: For network connectivity to AWS resources in a VPC, specify a subnet in the VPC
    Type: String

Resources:

  redis:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      ClusterName: !Ref ClusterName
      AZMode: single-az
      Engine: redis
      EngineVersion: 5.0.6
      NumCacheNodes: 1
      CacheNodeType: !Ref CacheInstaceType
      VpcSecurityGroupIds:
        - !Ref VPCSecurityGroup

  lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3Bucket
        S3Key: !Ref S3Key
      Description: Function to update token in redis
      Environment:
        Variables:
          REDIS_ENDPOINT: !GetAtt redis.RedisEndpoint.Address
      FunctionName: presence
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !Ref LambdaRole
      Runtime: python3.7
      VpcConfig:
        SecurityGroupIds:
          - !Ref VPCSecurityGroup
        SubnetIds:
          - !Ref LambdaVPCSubnet

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "ScheduledRule"
      ScheduleExpression: "rate(3 minutes)"
      State: "ENABLED"
      Targets:
        -
          Arn:
            Fn::GetAtt:
              - "lambda"
              - "Arn"
          Id: "presence"

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: "lambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        Fn::GetAtt:
          - "ScheduledRule"
          - "Arn"
